#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Congreso_2025.BD
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Congreso")]
	public partial class LinqUDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertTipo_usuario(Tipo_usuario instance);
    partial void UpdateTipo_usuario(Tipo_usuario instance);
    partial void DeleteTipo_usuario(Tipo_usuario instance);
    #endregion
		
		public LinqUDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqUDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqUDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqUDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Tipo_usuario> Tipo_usuario
		{
			get
			{
				return this.GetTable<Tipo_usuario>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tipo_usuario")]
	public partial class Tipo_usuario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id_tipo_usuario;
		
		private string _nombre_tipo;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_tipo_usuarioChanging(string value);
    partial void Onid_tipo_usuarioChanged();
    partial void Onnombre_tipoChanging(string value);
    partial void Onnombre_tipoChanged();
    #endregion
		
		public Tipo_usuario()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_tipo_usuario", DbType="NVarChar(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id_tipo_usuario
		{
			get
			{
				return this._id_tipo_usuario;
			}
			set
			{
				if ((this._id_tipo_usuario != value))
				{
					this.Onid_tipo_usuarioChanging(value);
					this.SendPropertyChanging();
					this._id_tipo_usuario = value;
					this.SendPropertyChanged("id_tipo_usuario");
					this.Onid_tipo_usuarioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombre_tipo", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string nombre_tipo
		{
			get
			{
				return this._nombre_tipo;
			}
			set
			{
				if ((this._nombre_tipo != value))
				{
					this.Onnombre_tipoChanging(value);
					this.SendPropertyChanging();
					this._nombre_tipo = value;
					this.SendPropertyChanged("nombre_tipo");
					this.Onnombre_tipoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
